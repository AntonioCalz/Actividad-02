# -*- coding: utf-8 -*-
"""Reporte Final 02.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Z4n_T63gwm4JLCuWlYdY747t9H4M6aHM
"""

#%% [markdown]
# Exploraci칩n de Synergy Logistics DB

# Commented out IPython magic to ensure Python compatibility.
#%% [code]
import pandas as pd
pd.plotting.register_matplotlib_converters()
import matplotlib.pyplot as plt
# %matplotlib inline
import seaborn as sns

#Muestre los primeros 500 items
pd.set_option('display.max_rows', 500)

filepath = 'synergy_logistics_database.txt'

datos = pd.read_csv(filepath, index_col="register_id")

datos.head()

datos.tail()

datos.describe()

# Estableces el ancho y alto de la figura
plt.figure(figsize=(16,6))

# Gr치fico para los tipos de transporte
sns.catplot(x='transport_mode', data=datos,kind='count')

# Gr치fico para los tipos de transporte por a침o
sns.catplot(x='year', data=datos, hue='transport_mode',kind='count')

#Muestra la cantidad de productos vendidos por medio de transporte
datos["transport_mode"].value_counts().to_frame()

#Se creo una copia llamada ventas con la base de datos completa original
ventas=datos.nlargest(19056, 'total_value')
ventas

#Se agrega el campo origin-destination a la base de datos ventas para conocer las rutas de origen - destino
ventas["origin-destination"] = ventas["origin"]+"-"+ventas["destination"]
ventas

#Muestra el valor total por producto
ventas.groupby('product').total_value.agg('max').to_frame()

#Muestra la demanda de productos por anio
ventas["year"].value_counts().to_frame()

#Muestra la demanda  por producto
ventas["product"].value_counts().to_frame()

#Muestra el valor total por lugar de origen
ventas.groupby('origin').total_value.agg('max').to_frame()

#Muestra el valor total por destino
ventas.groupby('destination').total_value.agg('max').to_frame()

#Muestra las ventas por anio
ventas.groupby('year').total_value.agg('sum').to_frame()

#Muestra la ventas por producto y por origen-destino
ventas.groupby(['product', 'origin-destination']).total_value.agg('sum').to_frame()

#Muestra el numero de ventas por producto y origen-destino
ventas.groupby('product') ['origin-destination'].value_counts().to_frame()

#Muestra las rutas con mayor demanda
ventastop=ventas["origin-destination"].value_counts(ascending=False).to_frame("Mayor demanda")
ventastop

ventastop.describe()

top10=ventastop.nlargest(10, 'Mayor demanda')
top10

#Muestra el valor total por anio
#ventas.groupby('year').total_value.agg('max').to_frame()
transportacion=ventas.groupby('transport_mode').total_value.agg('sum').to_frame()
transportacion

top3=transportacion.nlargest(3, 'total_value')
top3

#Para saber el valor de las ventas se utilizo la opcion de sumar el valor del campo total_value, por lo cual el importe total de las ventas es $215,691,298,000.00 este dato nos sera 
#util para saber en que paises debera enforcar esfuerzos para generar el 80% de sus ventas
ventas.sum(axis=0)

#Muestra los productos que estan en los 6000 mas vendidos, asi estan integrados los 6000 productos que generan el 80% de las ventas. Segun la regla 80-20, el 20% de los productos generan 80% de las ventas por lo tanto en este caso se selecciono aproximadamente el 20% de los productos top.
top6000=ventas.nlargest(6000, 'total_value')
top6000

top6000.sum(axis=0)

#Muestra el valor total por lugar de origen
top6000.groupby('origin').total_value.agg('max').to_frame()

#Muestra el valor total por lugar de destino
top6000.groupby('destination').total_value.agg('max').to_frame()

#Muestra el valor total por lugar de origen y destino
top6000.groupby('origin-destination').total_value.agg('max').to_frame()

#Muestra los productos que estan en los 6000 mas vendidos, asi estan integrados los 6000 productos que generan el 80% de las ventas. Segun la regla 80-20, el 20% de los productos generan 80% de las ventas por lo tanto en este caso se selecciono aproximadamente el 20% de los productos top.
top6000["product"].value_counts(ascending=False).to_frame()

#Muestra la ventas por origen-destino
ventas.groupby(['origin-destination']).total_value.agg('sum').to_frame()

top40=ventas.nlargest(40, 'total_value')
top40

#Genera tabla con la ventas por ruta
ventas_por_pais=ventas.groupby('origin-destination').total_value.agg('sum').to_frame("ventas por ruta")
#top6000["product"].value_counts(ascending=False).to_frame()

#Muestra las diez rutas con las mayores ventas
topventas10=ventas_por_pais.nlargest(10, 'ventas por ruta')
topventas10

#Genera tabla con la ventas por ruta para los productos que generan el 80% de las ventas
ventas6000_por_pais=top6000.groupby('origin-destination').total_value.agg('sum').to_frame("ventas por ruta")

#Muestra las diez rutas con las mayores ventas 
topventas6000=ventas6000_por_pais.nlargest(350, 'ventas por ruta')
topventas6000

topventas6000.sum(axis=0)